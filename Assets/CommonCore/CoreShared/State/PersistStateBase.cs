using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Newtonsoft.Json;

namespace CommonCore.State
{
    //DO NOT EDIT THIS FILE

    /// <summary>
    /// Represents state information to be retained across game sessions
    /// </summary>
    /// <remarks>
    /// Note that persist state is explicitly loaded and saved by state module.
    /// </remarks>
    public sealed partial class PersistState
    {

        private static readonly string Path = CoreParams.PersistentDataPath + "/persist.json";

        public static PersistState Instance { get; private set; }

        /// <summary>
        /// Loads persistent state from the default file
        /// </summary>
        public static void Load()
        {
            Instance = CoreUtils.LoadExternalJson<PersistState>(Path);
            if (Instance == null)
                Instance = new PersistState();
        }

        /// <summary>
        /// Saves persistent state to the default file
        /// </summary>
        public static void Save()
        {
            CoreUtils.SaveExternalJson(Path, Instance);
        }

        /// <summary>
        /// Purges the current persistent state and commits this to the default file
        /// </summary>
        public static void Reset()
        {
            Instance = new PersistState();
            Save();
        }

        //actual instance data (shared across game types)

        /// <summary>
        /// Key/Value store for arbitrary persistent data
        /// </summary>
        public Dictionary<string, System.Object> ExtraStore { get; private set; } = new Dictionary<string, object>();
    }
}